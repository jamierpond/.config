#!/bin/bash
set -e



# all args except the first
other_args="${@:2}"

cmake_list_present=$(ls | grep CMakeLists.txt | wc -l)
echo "CMakeLists.txt present: $cmake_list_present"
if [ $cmake_list_present -eq 0 ]; then
    echo "No CMakeLists.txt found"
    exit 1
fi

# contains_project=$(cat CMakeLists.txt | grep "project(" | wc -l)
# if [ $contains_project -eq 0 ]; then
#     echo "No project name found"
#     exit 1
# fi
#
# echo "Project name: $project_name"
# project_name=$(cat CMakeLists.txt | grep "project(" | sed 's/project(//g' | sed 's/)//g' | sed 's/ //g')

ninja_present=$(which ninja | wc -l)
generator="Ninja"
if [ $ninja_present -eq 0 ]; then
    generator="Unix Makefiles"
fi

cmake -G "$generator" -B build -DCMAKE_EXPORT_COMPILE_COMMANDS=1 \
  -DCMAKE_C_COMPILER=clang \
  -DCMAKE_CXX_COMPILER=clang++ \
  -S . $other_args
  # -DCMAKE_TOOLCHAIN_FILE=~/vcpkg/scripts/buildsystems/vcpkg.cmake \
  #
if [ ! -f build/compile_commands.json ]; then
    echo "No compile_commands.json found"
    exit 1
fi

# echo "Compiling..."
# cmake --build build

compile_please="$1"
if [ "$compile_please" == "c" ]; then
    echo "Compiling..."
    cmake --build "build" --config Release -j16 # -DCMAKE_LINKER=$(which lld)
fi

